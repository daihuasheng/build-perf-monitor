# ===================================================================
# Process Categorization Rules for MyMonitor
# ===================================================================
#
# How Priorities Work:
# -------------------
# The categorization system processes these rules in DESCENDING order of 'priority'.
# The first rule that matches a process "wins", and the process is categorized.
# This creates a "funnel" effect, matching from the most specific patterns to the
# most general ones. The priority values are designed to reflect this specificity.
#
# Priority Tiers Explained:
#
#   - Priority > 900 (Critical):
#     For special-case rules that must always run first, like ignoring certain
#     processes (e.g., VSCode server) to prevent them from being categorized.
#
#   - Priority 150-250 (High - Unambiguous Processes):
#     For highly specific and unambiguous process names or patterns. These are
#     processes that are almost certainly one specific thing.
#     Examples: 'cc1plus' (GCC C++ compiler internal), 'ninja', 'soong_build'.
#
#   - Priority 100-149 (Medium - Specific Actions):
#     For rules that distinguish different actions of the same tool, usually by
#     matching command-line arguments. These are more specific than just the
#     process name but less specific than a unique internal process.
#     Examples: 'gcc -c' (compile) vs. 'gcc -o' (link).
#
#   - Priority 50-99 (Low - Fallback / General Purpose):
#     For "fallback" rules that catch a general tool if none of the more specific
#     action-based rules matched.
#     Examples: A generic 'gcc' or 'clang' driver process that wasn't identified
#     as a specific compile or link step.
#
#   - Priority < 50 (Very Low - Common Utilities):
#     For very common tools or utilities that should only be matched if nothing
#     more specific was found.
#     Examples: 'python', 'bash', 'cp', 'rm', 'ar', 'zip'.
#
# This interleaved priority system is intentional and crucial for accuracy.
# For instance, a high-priority rule for 'clang -cc1' (internal compiler) must
# be checked before a low-priority fallback rule for 'clang' (generic driver).
#
# ===================================================================

# Priority > 900 (Critical)
[[rules]]
major_category = "Ignored"
category = "VSCodeServer"
priority = 1000
match_field = "current_cmd_name"
match_type = "exact"
pattern = "code"
comment = "Ignore VS Code editor processes by command name."

[[rules]]
major_category = "Ignored"
category = "MyMonitor"
priority = 999
match_field = "current_cmd_name"
match_type = "exact"
pattern = "mymonitor"
comment = "Ignore the monitoring tool's own process."

[[rules]]
major_category = "Ignored"
category = "ZellijTerminal"
priority = 998
match_field = "current_cmd_name"
match_type = "exact"
pattern = "zellij"
comment = "Ignore the Zellij terminal multiplexer process."

[[rules]]
major_category = "Ignored"
category = "CursorEditor"
priority = 997
match_field = "current_cmd_name"
match_type = "exact"
pattern = "cursor"
comment = "Ignore Cursor editor main process."

[[rules]]
major_category = "Ignored"
category = "CursorNode"
priority = 996
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*cursor.*node'
comment = "Ignore Cursor editor Node.js processes."

[[rules]]
major_category = "Ignored"
category = "CursorElectron"
priority = 995
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*cursor.*electron'
comment = "Ignore Cursor editor Electron processes."

[[rules]]
major_category = "Ignored"
category = "CursorHelper"
priority = 994
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*cursor.*helper'
comment = "Ignore Cursor editor helper processes."

[[rules]]
major_category = "Ignored"
category = "CursorServer"
priority = 993
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*cursor.*server'
comment = "Ignore Cursor editor server processes."

[[rules]]
major_category = "Ignored"
category = "CursorGeneral"
priority = 992
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*[Cc]ursor.*'
comment = "Ignore any Cursor-related processes (case-insensitive)."

# Priority 150-250 (High - Unambiguous Processes)
[[rules]]
major_category = "BuildSystem"
category = "BazelServer"
priority = 200
match_field = "current_cmd_full"
match_type = "regex"
pattern = 'java.*Bazel.*(A-server\.jar|server\.jar)'
comment = "Matches Bazel server Java processes."

[[rules]]
major_category = "BuildSystem"
category = "Gradle"
priority = 195
match_field = "current_cmd_full"
match_type = "regex"
pattern = 'java.*gradle'
comment = "Matches Gradle Java processes."

[[rules]]
major_category = "BuildSystem"
category = "Ninja"
priority = 190
match_field = "current_cmd_name"
match_type = "exact"
pattern = "ninja"
comment = "Ninja build system."

[[rules]]
major_category = "BuildSystem"
category = "Make"
priority = 185
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["make", "gmake"]
comment = "Make or gmake."

[[rules]]
major_category = "BuildSystem"
category = "CMake"
priority = 182
match_field = "current_cmd_name"
match_type = "exact"
pattern = "cmake"
comment = "CMake build configuration tool."

[[rules]]
major_category = "BuildSystem"
category = "Kati"
priority = 180
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["kati", "ckati"]
comment = "Kati or ckati (Soong's make)."

[[rules]]
major_category = "BuildSystem"
category = "SoongUI"
priority = 175
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["soong_ui", "soong_ui.bash"]
comment = "Soong UI."

[[rules]]
major_category = "BuildSystem"
category = "SoongBuild"
priority = 170
match_field = "current_cmd_name"
match_type = "exact"
pattern = "soong_build"
comment = "Soong build process itself."

[[rules]]
major_category = "BuildSystem"
category = "BazelClient"
priority = 165
match_field = "current_cmd_name"
match_type = "exact"
pattern = "bazel"
comment = "Bazel client."

[[rules]]
major_category = "Java_Compile"
category = "SoongJavacWrapper"
priority = 163
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)soong_javac_wrapper$"
comment = "AOSP's specific wrapper script for Java compilation."

[[rules]]
major_category = "Java_Compile"
category = "Javac"
priority = 162
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)javac$"
comment = "The Java compiler, matching its name or full path."

[[rules]]
major_category = "CPP_Compile"
category = "ClangInternalCompiler"
priority = 161
match_field = "current_cmd_full"
match_type = "contains"
pattern = " -cc1 "
comment = "Clang running in internal compiler/worker mode. This is a pure compilation task."

[[rules]]
major_category = "BuildSystem"
category = "Gomacc"
priority = 160
match_field = "current_cmd_name"
match_type = "exact"
pattern = "gomacc"
comment = "Goma C/C++ compiler."

[[rules]]
major_category = "CPP_Compile"
category = "GCCInternalCompiler"
priority = 160
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["cc1", "cc1plus"]
comment = "Actual GCC C/C++ compiler internals. This is a pure compilation task."

[[rules]]
major_category = "Go_Compile"
category = "GoInternalCompiler"
priority = 159
match_field = "current_cmd_full"
match_type = "regex"
pattern = "(?:^|/)go(?:\\.real)?\\s+tool\\s+compile"
comment = "Go internal compiler."

[[rules]]
major_category = "Go_Link"
category = "GoInternalLinker"
priority = 158
match_field = "current_cmd_full"
match_type = "regex"
pattern = "(?:^|/)go(?:\\.real)?\\s+tool\\s+link"
comment = "Go internal linker."

[[rules]]
major_category = "BuildSystem"
category = "SoongSandbox"
priority = 158
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)sbox$"
comment = "Soong's sandboxing tool (sbox) used to isolate build actions."

[[rules]]
major_category = "BuildSystem"
category = "Siso"
priority = 155
match_field = "current_cmd_name"
match_type = "exact"
pattern = "siso"
comment = "Siso build system (Chromium)."

[[rules]]
major_category = "CPP_Link"
category = "DirectLinker"
priority = 155
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["ld", "collect2", "lld", "ld.lld"]
comment = "Direct C/C++ linker/collector calls."

[[rules]]
major_category = "CPP_Assemble"
category = "DirectAssembler"
priority = 150
match_field = "current_cmd_name"
match_type = "exact"
pattern = "as"
comment = "C/C++ Assembler."

# Priority 100-149 (Medium - Specific Actions)
[[rules]]
major_category = "CPP_Preprocess"
category = "Driver_Preprocessing"
priority = 140
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:clang\+\+|g\+\+|clang|gcc|cc)(?=\s|$).*?\s-E(\s|$)'
comment = "A driver performing preprocessing only (-E flag)."

[[rules]]
major_category = "CPP_Assemble"
category = "Driver_SourceToAsm"
priority = 135
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:clang\+\+|g\+\+|clang|gcc|cc)(?=\s|$).*?\s-S(\s|$)'
comment = "A driver compiling source to assembly (-S flag)."

[[rules]]
major_category = "CPP_Compile"
category = "Driver_Compile"
priority = 125
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:clang\+\+|g\+\+|clang|gcc|cc)(?=\s|$)(?!.*?\.s\b)(?!.*?\.S\b).*?\s-c(\s|$)'
comment = "VERIFIED: A driver (clang, gcc) whose primary task is to compile a source file (-c). Its memory usage represents the compilation cost."

[[rules]]
major_category = "CPP_Compile"
category = "GenericCompileWrapper"
priority = 124
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)compile$"
comment = "Catches generic 'compile' scripts or symlinks, assuming compilation intent."

[[rules]]
major_category = "CPP_Link"
category = "Driver_Link"
priority = 120
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:clang\+\+|g\+\+|clang|gcc|cc)(?=\s|$)(?!.*?(\s-c|\s-S|\s-E)(\s|$)).*?\s-o\s'
comment = "VERIFIED: A driver (clang, gcc) whose primary task is to link object files. Its memory usage represents the linking cost."

[[rules]]
major_category = "CPP_Link"
category = "GenericLinkWrapper"
priority = 119
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)link$"
comment = "Catches generic 'link' scripts or symlinks, assuming linking intent."

# Priority 50-99 (Low - Fallback / General Purpose)
[[rules]]
major_category = "CPP_Driver"
category = "Driver_Clang_Fallback"
priority = 85
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["clang", "clang++", "cc"]
comment = "VERIFIED: A Clang/cc driver process that was NOT matched by a more specific rule (like compile or link). This is a generic driver."

[[rules]]
major_category = "CPP_Driver"
category = "Driver_GCC_Fallback"
priority = 84
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["gcc", "g++"]
comment = "VERIFIED: A GCC/g++ driver process that was NOT matched by a more specific rule. This is a generic driver."

[[rules]]
major_category = "Java_Compile"
category = "Java_CompileAndDex"
priority = 70
match_field = "current_cmd_name"
match_type = "exact"
pattern = "java"
comment = "General Java processes, including compilation and dexing."

[[rules]]
major_category = "Java_Compile"
category = "Java_CompileAndDex_Path"
priority = 69
match_field = "current_cmd_full"
match_type = "regex"
pattern = '(?:^|/)java\b'
comment = "Catches java if it's a path, if not caught by cmd_name 'java'."

[[rules]]
major_category = "Go_Compile"
category = "Go_Compiler_Fallback"
priority = 68
match_field = "current_cmd_name"
match_type = "exact"
pattern = "go"
comment = "Fallback for Go compiler driver if not matched by more specific rules."

[[rules]]
major_category = "Rust_Compile"
category = "Rust_Compiler"
priority = 65
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)rustc$"
comment = "Rust compiler, matching its name or full path."

[[rules]]
major_category = "Rust_Compile"
category = "Rust_Linter"
priority = 64
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)clippy-driver$"
comment = "Rust linter tool."

[[rules]]
major_category = "Scripting"
category = "ShellScriptFile"
priority = 62
match_field = "current_cmd_full"
match_type = "regex"
pattern = "\\.sh(\\s|$)"
comment = "Matches shell scripts by finding '.sh' in the full command."

[[rules]]
major_category = "Scripting"
category = "ShellInteractiveOrDirect"
priority = 61
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["bash", "sh", "zsh"]
comment = "Interactive shells or direct shell command execution."

# Priority < 50 (Very Low - Common Utilities)
[[rules]]
major_category = "OSUtilities"
category = "Generic_Path"
priority = 49
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/|_)((mkdir|rm|cp|mv|cat|sed|echo|touch|ln|find|grep|awk|tr|sort|uniq|head|tail|basename|dirname|readlink|stat|chmod|chown|expr|sleep|date|unzip|xz|tar|gzip|bzip2|patch|cd))$"
comment = "Fallback for common OS utilities when their name appears at the end of a path or with a prefix like '_'."

[[rules]]
major_category = "Scripting"
category = "Python"
priority = 45
match_field = "current_cmd_name"
match_type = "regex"
pattern = "^python[0-9._-]*|py3-launcher$"
comment = "Matches python interpreters (e.g., python3.12) and launchers."

[[rules]]
major_category = "DevelopmentTools"
category = "AndroidSDKTools"
priority = 42
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(aapt|aapt2|d8|r8|aidl|hidl-gen|dex2oat|dex2oatd|veridex)$"
comment = "Common Android SDK and build-related tools like aapt, aapt2, d8, aidl, etc."

[[rules]]
major_category = "DevelopmentTools"
category = "CPP_ABITools"
priority = 41
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(header-abi-dumper|header-abi-linker)$"
comment = "Tools for C++ ABI dumping and linking."

[[rules]]
major_category = "DevelopmentTools"
category = "MiscDevTools"
priority = 21
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(bindgen|openssl|versioner|xmlnotice|bluetooth_packetgen|microfactory|microfactory_Linux|checkpass|class2ndk|hiddenapi|profman|secilc|sepolicy-check)$"
comment = "Miscellaneous development tools, including more AOSP-specific ones."

[[rules]]
major_category = "DevelopmentTools"
category = "ArchiveAR"
priority = 20
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(ar|llvm-ar)$"
comment = "Archiver tool (ar, llvm-ar), matching name or full path."

[[rules]]
major_category = "DevelopmentTools"
category = "ArchiveZIP"
priority = 19
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(zip|jar|soong_zip|zip2zip|zipsync|merge_zips)$"
comment = "ZIP and JAR related tools, matching name or full path."

[[rules]]
major_category = "DevelopmentTools"
category = "BinStrip"
priority = 18
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)strip$"
comment = "Symbol stripping tool, matching name or full path."

[[rules]]
major_category = "DevelopmentTools"
category = "BinObjcopy"
priority = 17
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(objcopy|llvm-objcopy)$"
comment = "Object copying and manipulation tool, matching name or full path."

[[rules]]
major_category = "Testing"
category = "GoTestRunner"
priority = 11
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["gotestmain", "gotestrunner"]
comment = "Specific Go test runners used in Soong."

[[rules]]
major_category = "Testing"
category = "GoTestBinary"
priority = 10
match_field = "orig_cmd_full"
match_type = "regex"
pattern = '(_test/.*\s-test\.|\.test(\s|$))'
comment = "Generic Go test binaries, matched as a last resort."

[[rules]]
major_category = "OSUtilities"
category = "TestCommand"
priority = 5
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["test"]
comment = "Catch-all for the 'test' command."

# Note: No catch-all rule needed here. 
# If no rules match, the code automatically categorizes as ("Other", "Other_{cmd_name}")
# This provides more specific categorization than a generic "Other_Unmatched".

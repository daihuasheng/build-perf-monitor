# ===================================================================
# Process Categorization Rules for MyMonitor
# ===================================================================
#
# How Priorities Work:
# -------------------
# The categorization system processes these rules in DESCENDING order of 'priority'.
# The first rule that matches a process "wins", and the process is categorized.
# This creates a "funnel" effect, matching from the most specific patterns to the
# most general ones. The priority values are designed to reflect this specificity.
#
# Priority Tiers Explained:
#
#   - Priority > 900 (Critical):
#     For special-case rules that must always run first, like ignoring certain
#     processes (e.g., VSCode server) to prevent them from being categorized.
#
#   - Priority 150-250 (High - Unambiguous Processes):
#     For highly specific and unambiguous process names or patterns. These are
#     processes that are almost certainly one specific thing.
#     Examples: 'cc1plus' (GCC C++ compiler internal), 'ninja', 'soong_build'.
#
#   - Priority 100-149 (Medium - Specific Actions):
#     For rules that distinguish different actions of the same tool, usually by
#     matching command-line arguments. These are more specific than just the
#     process name but less specific than a unique internal process.
#     Examples: 'gcc -c' (compile) vs. 'gcc -o' (link).
#
#   - Priority 50-99 (Low - Fallback / General Purpose):
#     For "fallback" rules that catch a general tool if none of the more specific
#     action-based rules matched.
#     Examples: A generic 'gcc' or 'clang' driver process that wasn't identified
#     as a specific compile or link step.
#
#   - Priority < 50 (Very Low - Common Utilities):
#     For very common tools or utilities that should only be matched if nothing
#     more specific was found.
#     Examples: 'python', 'bash', 'cp', 'rm', 'ar', 'zip'.
#
# This interleaved priority system is intentional and crucial for accuracy.
# For instance, a high-priority rule for 'clang -cc1' (internal compiler) must
# be checked before a low-priority fallback rule for 'clang' (generic driver).
#
# ===================================================================

# Priority > 900 (Critical)
[[rules]]
major_category = "Ignored"
category = "VSCodeServer"
priority = 1000
match_field = "current_cmd_name"
match_type = "exact"
pattern = "code"
comment = "Ignore VS Code editor processes by command name."

[[rules]]
major_category = "Ignored"
category = "MyMonitor"
priority = 999
match_field = "current_cmd_name"
match_type = "exact"
pattern = "mymonitor"
comment = "Ignore the monitoring tool's own process."

[[rules]]
major_category = "Ignored"
category = "ZellijTerminal"
priority = 998
match_field = "current_cmd_name"
match_type = "exact"
pattern = "zellij"
comment = "Ignore the Zellij terminal multiplexer process."

[[rules]]
major_category = "Ignored"
category = "CursorEditor"
priority = 997
match_field = "current_cmd_name"
match_type = "exact"
pattern = "cursor"
comment = "Ignore Cursor editor main process."

[[rules]]
major_category = "Ignored"
category = "CursorNode"
priority = 996
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*cursor.*node'
comment = "Ignore Cursor editor Node.js processes."

[[rules]]
major_category = "Ignored"
category = "CursorElectron"
priority = 995
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*cursor.*electron'
comment = "Ignore Cursor editor Electron processes."

[[rules]]
major_category = "Ignored"
category = "CursorHelper"
priority = 994
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*cursor.*helper'
comment = "Ignore Cursor editor helper processes."

[[rules]]
major_category = "Ignored"
category = "CursorServer"
priority = 993
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*cursor.*server'
comment = "Ignore Cursor editor server processes."

[[rules]]
major_category = "Ignored"
category = "CursorGeneral"
priority = 992
match_field = "current_cmd_full"
match_type = "regex"
pattern = '.*[Cc]ursor.*'
comment = "Ignore any Cursor-related processes (case-insensitive)."

# Priority 150-250 (High - Unambiguous Processes)
[[rules]]
major_category = "BuildSystem"
category = "BazelServer"
priority = 205
match_field = "current_cmd_full"
match_type = "regex"
pattern = 'java.*Bazel.*server\.jar'
comment = "Matches Bazel server Java processes."

[[rules]]
major_category = "BuildSystem"
category = "Gradle"
priority = 195
match_field = "current_cmd_full"
match_type = "regex"
pattern = 'java.*gradle'
comment = "Matches Gradle Java processes."

[[rules]]
major_category = "BuildSystem"
category = "Ninja"
priority = 228
match_field = "current_cmd_name"
match_type = "exact"
pattern = "ninja"
comment = "Ninja build system."

[[rules]]
major_category = "BuildSystem"
category = "Make"
priority = 186
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["make", "gmake"]
comment = "Make or gmake."

[[rules]]
major_category = "BuildSystem"
category = "CMake"
priority = 182
match_field = "current_cmd_name"
match_type = "exact"
pattern = "cmake"
comment = "CMake build configuration tool."

[[rules]]
major_category = "BuildSystem"
category = "Kati"
priority = 180
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["kati", "ckati"]
comment = "Kati or ckati (Soong's make)."

[[rules]]
major_category = "BuildSystem"
category = "SoongUI"
priority = 177
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["soong_ui", "soong_ui.bash"]
comment = "Soong UI."

[[rules]]
major_category = "BuildSystem"
category = "SoongBuild"
priority = 227
match_field = "current_cmd_name"
match_type = "exact"
pattern = "soong_build"
comment = "Soong build process itself."

[[rules]]
major_category = "BuildSystem"
category = "BazelClient"
priority = 167
match_field = "current_cmd_name"
match_type = "exact"
pattern = "bazel"
comment = "Bazel client."

[[rules]]
major_category = "Java_Compile"
category = "SoongJavacWrapper"
priority = 164
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)soong_javac_wrapper$"
comment = "AOSP's specific wrapper script for Java compilation."

[[rules]]
major_category = "Java_Compile"
category = "Javac"
priority = 162
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)javac$"
comment = "The Java compiler, matching its name or full path."

[[rules]]
major_category = "CPP_COMPILE"
category = "Frontend_GCC"
priority = 230
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["cc1", "cc1plus"]
comment = "GCC internal frontend - parsing, template instantiation, semantic analysis"
examples = [
    "cc1 -quiet -v -imultiarch x86_64-linux-gnu -iprefix /usr/lib/gcc/x86_64-linux-gnu/9/ -isystem /usr/lib/gcc/x86_64-linux-gnu/9/include -D_GNU_SOURCE main.c",
    "cc1plus -quiet -v -imultiarch x86_64-linux-gnu -D_GNU_SOURCE -fPIC -mtune=generic -march=x86-64 -auxbase-strip main.o -g -O2 -version -o /tmp/ccXXXXXX.s main.cpp",
]

[[rules]]
major_category = "CPP_COMPILE"
category = "Frontend_Clang"
priority = 210
match_field = "current_cmd_full"
match_type = "contains"
pattern = " -cc1 "
comment = "Clang internal frontend - parsing, template instantiation, semantic analysis"
examples = [
    "clang -cc1 -triple x86_64-unknown-linux-gnu -emit-obj -mrelax-all -disable-free -main-file-name main.cpp -mrelocation-model static -mthread-model posix -fmath-errno -masm-verbose -mconstructor-aliases -munwind-tables -target-cpu x86-64 -dwarf-column-info -debugger-tuning=gdb -resource-dir /usr/lib/clang/10.0.0 -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9 -O2 -fdebug-compilation-dir /home/user/project -ferror-limit 19 -fmessage-length 0 -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -fcolor-diagnostics -o main.o -x c++ main.cpp",
]

[[rules]]
major_category = "BuildSystem"
category = "Gomacc"
priority = 163
match_field = "current_cmd_name"
match_type = "exact"
pattern = "gomacc"
comment = "Goma C/C++ compiler."

[[rules]]
major_category = "Go_Compile"
category = "GoInternalCompiler"
priority = 159
match_field = "current_cmd_full"
match_type = "regex"
pattern = "(?:^|/)go(?:\\.real)?\\s+tool\\s+compile"
comment = "Go internal compiler."

[[rules]]
major_category = "Go_Link"
category = "GoInternalLinker"
priority = 158
match_field = "current_cmd_full"
match_type = "regex"
pattern = "(?:^|/)go(?:\\.real)?\\s+tool\\s+link"
comment = "Go internal linker."

[[rules]]
major_category = "BuildSystem"
category = "SoongSandbox"
priority = 157
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)sbox$"
comment = "Soong's sandboxing tool (sbox) used to isolate build actions."

[[rules]]
major_category = "BuildSystem"
category = "Siso"
priority = 155
match_field = "current_cmd_name"
match_type = "exact"
pattern = "siso"
comment = "Siso build system (Chromium)."

[[rules]]
major_category = "CPP_COMPILE"
category = "Full_Clang"
priority = 190
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:clang|clang\+\+|[^/]*-clang(?:\+\+)?)(?=\s)(?!.*\s+-E(?:\s|$))(?!.*\s+-S(?:\s|$)).*\s+-c(?:\s|$)'
comment = "Clang full compilation - complete source to object file in single process"
examples = [
    "clang++ -c -O2 -std=c++17 -Wall -Wextra -fPIC -I./include -DNDEBUG src/module.cpp -o build/module.o",
    "clang -c -O3 -march=native -flto -ffunction-sections -fdata-sections main.c -o main.o",
    "/usr/bin/clang++ -c -g -O0 -std=c++14 -fno-rtti -fno-exceptions -I/usr/include/qt5 widget.cpp -o widget.o",
]

[[rules]]
major_category = "CPP_COMPILE"
category = "Full_GCC"
priority = 185
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:gcc|g\+\+)(?=\s)(?!.*\s+-E(?:\s|$))(?!.*\s+-S(?:\s|$)).*\s+-c(?:\s|$)'
comment = "GCC full compilation driver - coordinates frontend and backend processes"
examples = [
    "gcc -c -O2 -Wall -Wextra -std=c99 -fPIC -I./include -DVERSION=\\\"1.0\\\" src/utils.c -o build/utils.o",
    "g++ -c -O3 -std=c++17 -march=native -mtune=native -flto -fno-rtti -I./src -I./third_party/include main.cpp -o main.o",
    "/usr/bin/g++-9 -c -g -O0 -std=c++11 -fstack-protector-strong -D_FORTIFY_SOURCE=2 test.cpp -o test.o",
]

# 版本号编译器 (gcc-9, g++-11, clang-12 等)
[[rules]]
major_category = "CPP_COMPILE"
category = "Full_Versioned"
priority = 188
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:gcc|g\+\+|clang|clang\+\+)-\d+(?:\.\d+)*(?=\s)(?!.*\s+-E(?:\s|$))(?!.*\s+-S(?:\s|$)).*\s+-c(?:\s|$)'
comment = "Versioned compiler full compilation (gcc-9, clang-12, etc.)"
examples = [
    "g++-9 -c -std=c++17 main.cpp -o main.o",
    "clang-12 -c -O3 main.c -o main.o",
    "gcc-11 -c -g debug.c -o debug.o",
]

[[rules]]
major_category = "CPP_COMPILE"
category = "Full_Cross"
priority = 187
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?[^/]*-(?:linux-)?(?:gnu|mingw32|mingw64|elf|eabi)[^/]*-g(?:cc|\+\+)(?=\s)(?!.*\s+-E(?:\s|$))(?!.*\s+-S(?:\s|$)).*\s+-c(?:\s|$)'
comment = "Cross-compiler full compilation - complete compilation for target architecture"
examples = [
    "arm-linux-gnueabihf-gcc -c -O2 -march=armv7-a -mfpu=neon -mfloat-abi=hard -I./include embedded.c -o embedded.o",
    "aarch64-linux-gnu-g++ -c -O3 -mcpu=cortex-a72 -std=c++14 -fPIC driver.cpp -o driver.o",
    "x86_64-w64-mingw32-gcc -c -O2 -I./win32/include -DWIN32 -D_WIN32_WINNT=0x0601 windows_port.c -o windows_port.o",
]

[[rules]]
major_category = "CPP_COMPILE"
category = "Full_Specialized"
priority = 176
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:nvcc|icpc|icc|pgcc|xlc|xlC)(?=\s).*\s+-c(?:\s|$)'
comment = "Specialized compiler full compilation - CUDA, Intel, PGI, IBM compilers"
examples = [
    "nvcc -c -O3 -arch=sm_75 -std=c++14 -I./cuda_include --expt-relaxed-constexpr kernel.cu -o kernel.o",
    "icpc -c -O3 -xHost -ipo -std=c++17 -I./intel_include optimized.cpp -o optimized.o",
    "pgcc -c -O4 -acc -ta=tesla:cc70 -Minfo=accel parallel_code.c -o parallel_code.o",
]

# 独立的 cpp 预处理器
[[rules]]
major_category = "CPP_COMPILE"
category = "Preprocess_CPP"
priority = 172
match_field = "current_cmd_name"
match_type = "regex"
pattern = '^(?:.*/)?cpp$'
comment = "Standalone C preprocessor (cpp command)"
examples = ["cpp -I./include main.c", "/usr/bin/cpp -DDEBUG source.c"]

[[rules]]
major_category = "CPP_COMPILE"
category = "Preprocess_Any"
priority = 170
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:cpp|gcc|g\+\+|clang|clang\+\+|[^/]*-(?:linux-)?gnu[^/]*-g(?:cc|\+\+)|[^/]*-clang(?:\+\+)?)(?:\s+.*?)?\s+-E(?:\s|$)'
comment = "Preprocessing stage - header expansion and macro processing"
examples = [
    "gcc -E -I./include -I/usr/include -DDEBUG=1 -DVERSION=\\\"2.0\\\" main.c",
    "clang++ -E -std=c++17 -I./src -I./third_party -DUSE_FEATURE_X template_heavy.cpp",
    "cpp -I./include -D_GNU_SOURCE -DPLATFORM_LINUX source.c",
]

[[rules]]
major_category = "CPP_COMPILE"
category = "Backend_Any"
priority = 166
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:gcc|g\+\+|clang|clang\+\+|[^/]*-(?:linux-)?gnu[^/]*-g(?:cc|\+\+)|[^/]*-clang(?:\+\+)?)(?:\s+.*?)?\s+-S(?:\s|$)'
comment = "Backend code generation - optimization and assembly generation"
examples = [
    "gcc -S -O3 -march=native -mtune=native -fomit-frame-pointer math_intensive.c -o math_intensive.s",
    "clang++ -S -O2 -std=c++17 -fvectorize -fslp-vectorize algorithm.cpp -o algorithm.s",
    "g++ -S -Og -g -fno-omit-frame-pointer debug_version.cpp -o debug_version.s",
]

[[rules]]
major_category = "CPP_COMPILE"
category = "Assembly_Any"
priority = 161
match_field = "current_cmd_name"
match_type = "regex"
pattern = "^(?:.*/)?(?:as|gas|[^/]*-(?:linux-)?gnu[^/]*-as)$"
comment = "Assembly stage - convert assembly code to object files"
examples = [
    "as --64 -o main.o main.s",
    "gas --32 --march=i686 -o legacy.o legacy.s",
    "arm-linux-gnueabihf-as -march=armv7-a -mfpu=neon -o embedded.o embedded.s",
]

# 交叉编译器和专用编译器的通用回退
[[rules]]
major_category = "CPP_COMPILE"
category = "Full_CrossGeneric"
priority = 51
match_field = "current_cmd_name"
match_type = "regex"
pattern = "^(?:.*/)?[^/]*-(?:linux-)?(?:gnu|mingw32|mingw64|elf|eabi)[^/]*-g(?:cc|\\+\\+)$"
comment = "Cross-compiler fallback - unspecified cross-compilation operation"
examples = [
    "arm-linux-gnueabihf-gcc",
    "x86_64-w64-mingw32-g++",
    "aarch64-linux-gnu-gcc",
]

[[rules]]
major_category = "CPP_COMPILE"
category = "Full_Generic"
priority = 50
match_field = "current_cmd_name"
match_type = "regex"
pattern = "^(?:.*/)?(?:gcc|g\\+\\+|clang|clang\\+\\+|cc|c\\+\\+)$"
comment = "Generic compiler driver fallback - unspecified compilation operation"
examples = ["gcc", "clang++", "arm-linux-gnueabihf-g++", "/usr/local/bin/clang"]

# ===================================================================
# CPP_LINK - C/C++ 链接相关进程
# 命名格式: {链接类型}_{工具类型} 或 {特殊操作}_{工具类型}
# ===================================================================

# LTO 链接 - 特殊的高内存消耗操作
[[rules]]
major_category = "CPP_LINK"
category = "LTO_Optimizer"
priority = 229
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["lto-wrapper", "lto1"]
comment = "Link-time optimization processes - highest memory usage in linking"
examples = [
    "lto-wrapper --plugin-opt=-fresolution=/tmp/ccXXXXXX.res --plugin-opt=-pass-through=-lgcc --plugin-opt=-pass-through=-lgcc_s --plugin-opt=-pass-through=-lc --plugin-opt=-pass-through=-lgcc --plugin-opt=-pass-through=-lgcc_s --plugin-opt=O2 --plugin-opt=mcpu=native /usr/lib/gcc/x86_64-linux-gnu/9/collect2",
    "lto1 -fltrans-output-list=/tmp/ccXXXXXX.ltrans.out -fltrans -dumpbase main -dumpdir ./ -auxbase main -O2 -version -fcompare-debug-second /tmp/ccXXXXXX.ltrans0.ltrans.o",
]

[[rules]]
major_category = "CPP_LINK"
category = "LTO_Collector"
priority = 208
match_field = "current_cmd_full"
match_type = "regex"
pattern = 'collect2.*--plugin.*lto'
comment = "LTO-enabled collector process - part of link-time optimization"
examples = [
    "collect2 --plugin /usr/lib/gcc/x86_64-linux-gnu/9/liblto_plugin.so --plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/9/lto-wrapper --plugin-opt=-fresolution=/tmp/ccXXXXXX.res --plugin-opt=-pass-through=-lgcc --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/Scrt1.o main.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc",
]

# 可执行文件链接
[[rules]]
major_category = "CPP_LINK"
category = "Executable_Driver"
priority = 200
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:gcc|g\+\+|clang|clang\+\+)\s+(?!.*-c\s)(?!.*-S\s)(?!.*-E\s)(?!.*-shared\s).*-o\s'
comment = "Executable linking via compiler driver - memory scales with object count"
examples = [
    "gcc -o myapp main.o utils.o math.o -L./lib -lmylib -lm -lpthread",
    "clang++ -o server main.o network.o database.o -std=c++17 -O2 -L/usr/local/lib -lboost_system -lboost_thread -lpq",
    "g++ -o game_engine core.o graphics.o audio.o input.o -L./third_party/lib -lSDL2 -lSDL2_image -lSDL2_mixer -lGL -lGLEW -lpthread",
]

# 共享库链接
[[rules]]
major_category = "CPP_LINK"
category = "SharedLib_Driver"
priority = 175
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:gcc|g\+\+|clang|clang\+\+|[^/]*-(?:linux-)?gnu[^/]*-g(?:cc|\+\+)|[^/]*-clang(?:\+\+)?)(?:\s+.*?)?\s+-shared(?:\s|$)'
comment = "Shared library linking via compiler driver - higher memory than executable"
examples = [
    "gcc -shared -fPIC -o libutils.so.1.0 utils.o string_ops.o file_ops.o -lc",
    "clang++ -shared -fPIC -Wl,-soname,libmylib.so.1 -o libmylib.so.1.2.3 obj1.o obj2.o obj3.o -lstdc++ -lm",
    "g++ -shared -fPIC -O2 -o libgraphics.so graphics.o renderer.o shader.o -lGL -lGLEW",
]

# 静态库创建
[[rules]]
major_category = "CPP_LINK"
category = "StaticLib_Archiver"
priority = 25
match_field = "current_cmd_full"
match_type = "regex"
pattern = '^(?:.*/)?(?:ar|llvm-ar|[^/]*-(?:linux-)?gnu[^/]*-ar)(?:\s+.*?)?\s+(?:rcs|cr|cru)(?:\s|$)'
comment = "Static library archiving - relatively low memory usage"
examples = [
    "ar rcs libutils.a utils.o string_ops.o file_ops.o math_ops.o",
    "llvm-ar rcs libcore.a core.o memory.o threading.o logging.o",
    "arm-linux-gnueabihf-ar cr libembedded.a sensor.o actuator.o protocol.o",
]

# 直接链接器调用
[[rules]]
major_category = "CPP_LINK"
category = "Direct_Linker"
priority = 165
match_field = "current_cmd_name"
match_type = "regex"
pattern = "^(?:.*/)?(?:ld|ld\\.lld|ld\\.gold|ld\\.bfd|[^/]*-(?:linux-)?gnu[^/]*-ld)$"
comment = "Direct linker invocation - memory varies with optimization level"
examples = [
    "ld -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o myapp /usr/lib/x86_64-linux-gnu/crt1.o main.o -lc",
    "ld.lld --hash-style=gnu --eh-frame-hdr -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o server main.o network.o -lc -lgcc_s",
    "ld.gold --threads --thread-count=4 -o optimized_app main.o lib1.o lib2.o -lc -lstdc++",
]

# 普通收集器
[[rules]]
major_category = "CPP_LINK"
category = "Standard_Collector"
priority = 160
match_field = "current_cmd_name"
match_type = "exact"
pattern = "collect2"
comment = "Standard GCC collector - coordinates non-LTO linking"
examples = [
    "collect2 --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/Scrt1.o main.o -lstdc++ -lm -lgcc_s -lgcc -lc",
]

[[rules]]
major_category = "Java_Compile"
category = "Java_CompileAndDex"
priority = 70
match_field = "current_cmd_name"
match_type = "exact"
pattern = "java"
comment = "General Java processes, including compilation and dexing."

[[rules]]
major_category = "Java_Compile"
category = "Java_CompileAndDex_Path"
priority = 69
match_field = "current_cmd_full"
match_type = "regex"
pattern = '(?:^|/)java\b'
comment = "Catches java if it's a path, if not caught by cmd_name 'java'."

[[rules]]
major_category = "Go_Compile"
category = "Go_Compiler_Fallback"
priority = 68
match_field = "current_cmd_name"
match_type = "exact"
pattern = "go"
comment = "Fallback for Go compiler driver if not matched by more specific rules."

[[rules]]
major_category = "Rust_Compile"
category = "Rust_Compiler"
priority = 65
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)rustc$"
comment = "Rust compiler, matching its name or full path."

[[rules]]
major_category = "Rust_Compile"
category = "Rust_Linter"
priority = 64
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)clippy-driver$"
comment = "Rust linter tool."

[[rules]]
major_category = "Scripting"
category = "ShellScriptFile"
priority = 62
match_field = "current_cmd_full"
match_type = "regex"
pattern = "\\.sh(\\s|$)"
comment = "Matches shell scripts by finding '.sh' in the full command."

[[rules]]
major_category = "Scripting"
category = "ShellInteractiveOrDirect"
priority = 61
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["bash", "sh", "zsh"]
comment = "Interactive shells or direct shell command execution."

# Priority < 50 (Very Low - Common Utilities)
[[rules]]
major_category = "OSUtilities"
category = "Generic_Path"
priority = 49
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/|_)((mkdir|rm|cp|mv|cat|sed|echo|touch|ln|find|grep|awk|tr|sort|uniq|head|tail|basename|dirname|readlink|stat|chmod|chown|expr|sleep|date|unzip|xz|tar|gzip|bzip2|patch|cd))$"
comment = "Fallback for common OS utilities when their name appears at the end of a path or with a prefix like '_'."

[[rules]]
major_category = "Scripting"
category = "Python"
priority = 45
match_field = "current_cmd_name"
match_type = "regex"
pattern = "^python[0-9._-]*|py3-launcher$"
comment = "Matches python interpreters (e.g., python3.12) and launchers."

[[rules]]
major_category = "DevelopmentTools"
category = "AndroidSDKTools"
priority = 42
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(aapt|aapt2|d8|r8|aidl|hidl-gen|dex2oat|dex2oatd|veridex)$"
comment = "Common Android SDK and build-related tools like aapt, aapt2, d8, aidl, etc."

[[rules]]
major_category = "DevelopmentTools"
category = "CPP_ABITools"
priority = 41
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(header-abi-dumper|header-abi-linker)$"
comment = "Tools for C++ ABI dumping and linking."

[[rules]]
major_category = "DevelopmentTools"
category = "MiscDevTools"
priority = 21
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(bindgen|openssl|versioner|xmlnotice|bluetooth_packetgen|microfactory|microfactory_Linux|checkpass|class2ndk|hiddenapi|profman|secilc|sepolicy-check)$"
comment = "Miscellaneous development tools, including more AOSP-specific ones."

[[rules]]
major_category = "DevelopmentTools"
category = "ArchiveAR"
priority = 20
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(ar|llvm-ar)$"
comment = "Archiver tool (ar, llvm-ar), matching name or full path."

[[rules]]
major_category = "DevelopmentTools"
category = "ArchiveZIP"
priority = 19
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(zip|jar|soong_zip|zip2zip|zipsync|merge_zips)$"
comment = "ZIP and JAR related tools, matching name or full path."

[[rules]]
major_category = "DevelopmentTools"
category = "BinStrip"
priority = 18
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)strip$"
comment = "Symbol stripping tool, matching name or full path."

[[rules]]
major_category = "DevelopmentTools"
category = "BinObjcopy"
priority = 17
match_field = "current_cmd_name"
match_type = "regex"
pattern = "(?:^|/)(objcopy|llvm-objcopy)$"
comment = "Object copying and manipulation tool, matching name or full path."

[[rules]]
major_category = "Testing"
category = "GoTestRunner"
priority = 11
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["gotestmain", "gotestrunner"]
comment = "Specific Go test runners used in Soong."

[[rules]]
major_category = "Testing"
category = "GoTestBinary"
priority = 10
match_field = "current_cmd_full"
match_type = "regex"
pattern = '(_test/.*\s-test\.|\.test(\s|$))'
comment = "Generic Go test binaries, matched as a last resort."

[[rules]]
major_category = "OSUtilities"
category = "TestCommand"
priority = 5
match_field = "current_cmd_name"
match_type = "in_list"
patterns = ["test"]
comment = "Catch-all for the 'test' command."

# Note: No catch-all rule needed here. 
# If no rules match, the code automatically categorizes as ("Other", "Other_{cmd_name}")
# This provides more specific categorization than a generic "Other_Unmatched".
